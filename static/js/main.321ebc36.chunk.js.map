{"version":3,"sources":["components/SearchBar.js","components/FilterBtn.js","components/ExpandCollapseBtn.js","components/Recipe.js","components/SettingsBtn.js","components/Modal.js","App.js","reportWebVitals.js","index.js"],"names":["SearchBar","props","type","value","filterText","placeholder","onChange","e","onFilterTextChange","target","className","FilterBtn","aria-pressed","isPressed","name","onClick","onFilterBtnChange","total","ExpandCollapseBtn","onExpandCollapseToggle","Recipe","ingredients","map","ingredient","index","quantity","length","sources","source","htmlFor","id","checked","isCompleted","toggleRecipeCompleted","toggleDisplayRecipeInfo","src","img","alt","isDisplayingInfo","SettingsBtn","onShowModalToggle","Modal","handleCloseClick","isShowing","localStorage","clear","uncheckAllRecipes","FILTER_MAP","All","Incomplete","recipe","Completed","FILTER_NAMES","Object","keys","recipeDataWProps","RecipeData","forEach","App","useState","JSON","parse","getItem","recipes","setRecipes","setFilterText","filterBtn","setFilterBtn","isExpanded","setExpanded","isShowingModal","setShowingModal","useEffect","setItem","stringify","filterBtnCounts","filter","filterBtns","btn","handleFilterBtnChange","recipeList","toLowerCase","indexOf","containsFilterText","editedRecipes","handleShowModalToggle","expandedRecipes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.321ebc36.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction SearchBar(props) {\n  function handleFilterTextChange(e) {\n    props.onFilterTextChange(e.target.value);\n  }\n\n  return (\n    <input\n      type=\"text\"\n      value={props.filterText}\n      placeholder=\"Search recipe, ingredient, or source...\"\n      onChange={handleFilterTextChange}\n      className=\"search-bar custom-input\" />\n  );\n}\n\nexport default SearchBar;","import React from \"react\";\n\nfunction FilterBtn(props) {\n  function handleClick() {\n    props.onFilterBtnChange(props.name);\n  }\n  return (\n    <button\n      aria-pressed={props.isPressed}\n      className={\"filter-btn\" + (props.name === 'All' ? \" first\" : \"\")}\n      onClick={handleClick}>\n      {`${props.name} (${props.total})`}\n    </button>\n  );\n}\n\nexport default FilterBtn;","import React from \"react\";\n\nfunction ExpandCollapseBtn(props) {\n  function handleToggleClick() {\n    props.onExpandCollapseToggle();\n  }\n  return (\n    <button\n      className=\"expand-collapse-btn\"\n      onClick={handleToggleClick}>\n      {props.name}\n    </button>\n  );\n}\n\nexport default ExpandCollapseBtn;","import React from \"react\";\n\nfunction Recipe(props) {\n  const ingredients = props.ingredients.map((ingredient, index) =>\n    <li\n      key={ingredient.name}\n      className=\"recipe-info-item\">\n      {`${ingredient.name} (${ingredient.quantity})${index === props.ingredients.length-1 ? '' : ','}`}\n    </li>\n  );\n  const sources = props.sources.map((source, index) =>\n    <li\n      key={source[0]}\n      className=\"recipe-info-item\">\n      {source + (index === props.sources.length-1 ? '' : ',')}\n    </li>\n  );\n  function handleClick() {\n    props.toggleDisplayRecipeInfo(props.id);\n  }\n  function handleChange() {\n    props.toggleRecipeCompleted(props.id);\n  }\n\n  return (\n    <li className=\"recipe\">\n      <label\n        htmlFor={props.id}\n        className=\"checkbox-container\">\n        <input\n          type=\"checkbox\"\n          checked={props.isCompleted}\n          onChange={handleChange}\n          id={props.id} />\n        <div className=\"custom-checkbox custom-input\"></div>\n      </label>\n      <div\n        className=\"recipe-no-checkbox\"\n        onClick={handleClick}>\n        <div className=\"recipe-img-and-label\">\n          <img\n            src={props.img}\n            alt={props.name}\n            className=\"recipe-img\"/>\n          <label className=\"recipe-label\">{props.name}</label>\n        </div>\n        {props.isDisplayingInfo && \n        <ul className=\"recipe-info-container\">\n          <li>\n            <ul className=\"recipe-info-list\">\n              <label className=\"recipe-info-label\">Ingredient(s):</label>\n              {ingredients}\n            </ul>\n          </li>\n          <li>\n            <ul className=\"recipe-info-list\">\n              <label className=\"recipe-info-label\">Source(s):</label>\n              {sources}\n            </ul>\n          </li>\n        </ul>\n        } \n      </div>\n    </li>\n  );\n}\n\nexport default Recipe;","import React from \"react\";\n\nfunction SettingsBtn(props) {\n  function handleClick() {\n    props.onShowModalToggle();\n  }\n  return (\n    <button\n      onClick={handleClick}\n      className=\"settings-btn\">\n      Settings\n    </button>\n  );\n}\n\nexport default SettingsBtn;","import React from 'react';\n\nfunction Modal(props) {\n  function handleLocalStorageClick() {\n    localStorage.clear();\n    props.uncheckAllRecipes();\n  }\n  function handleCloseClick() {\n    props.onShowModalToggle();\n  }\n  if (!props.isShowing) {\n    return null;\n  }\n  return (\n    <div>\n      <div className=\"modal\">\n        <div className=\"modal-heading-container\">\n          <h2 className=\"modal-heading\">Settings</h2>\n          <h2\n            onClick={handleCloseClick}\n            className=\"close-btn\">\n            X\n          </h2>\n        </div>\n        <div className=\"settings-container\">\n          <button onClick={handleLocalStorageClick}>Clear local storage</button>\n        </div>\n      </div>\n      <div className=\"modal-overlay\" onClick={handleCloseClick}></div>\n    </div>\n  );\n}\n\nexport default Modal;","import React, { useState, useEffect } from 'react';\n\nimport SearchBar from './components/SearchBar';\nimport FilterBtn from './components/FilterBtn';\nimport ExpandCollapseBtn from './components/ExpandCollapseBtn';\nimport Recipe from './components/Recipe';\nimport SettingsBtn from './components/SettingsBtn';\nimport Modal from './components/Modal';\n\nimport RecipeData from './assets/recipes.json';\n\nconst FILTER_MAP = {\n  All: () => true,\n  Incomplete: recipe => !recipe.isCompleted,\n  Completed: recipe => recipe.isCompleted\n};\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\n// Adds isCompleted and isDisplayingInfo properties to recipe data\nlet recipeDataWProps = RecipeData;\nrecipeDataWProps.forEach(recipe => {\n  recipe[\"isCompleted\"] = false;\n  recipe[\"isDisplayingInfo\"] = false;\n});\n\nfunction App() {\n  const [recipes, setRecipes] = useState(\n    JSON.parse(localStorage.getItem('recipes')) || recipeDataWProps\n  );\n  const [filterText, setFilterText] = useState('');\n  const [filterBtn, setFilterBtn] = useState('All');\n  const [isExpanded, setExpanded] = useState(false);\n  const [isShowingModal, setShowingModal] = useState(false);\n\n  useEffect(() => {\n    localStorage.setItem('recipes', JSON.stringify(recipes));\n  }, [recipes]);\n\n  const filterBtnCounts = {\n    All: recipes.length,\n    Incomplete: recipes.filter(FILTER_MAP['Incomplete']).length,\n    Completed: recipes.filter(FILTER_MAP['Completed']).length\n  };\n  const filterBtns = FILTER_NAMES.map(btn =>\n    <FilterBtn\n      key={btn}\n      name={btn}\n      total={filterBtnCounts[btn]}\n      isPressed={btn === filterBtn}\n      onFilterBtnChange={handleFilterBtnChange} />\n  );\n  const recipeList = recipes\n  .filter(FILTER_MAP[filterBtn])\n  .filter(filterTextFunc)\n  .map(recipe =>\n    <Recipe\n      key={recipe.id}\n      id={recipe.id}\n      name={recipe.name}\n      img={recipe.img}\n      ingredients={recipe.ingredients}\n      sources={recipe.sources}\n      isCompleted={recipe.isCompleted}\n      isDisplayingInfo={recipe.isDisplayingInfo}\n      toggleRecipeCompleted={toggleRecipeCompleted}\n      toggleDisplayRecipeInfo={toggleDisplayRecipeInfo} />\n  );\n  // Filters recipe list for recipes, ingredients, and sources matching filterText\n  function filterTextFunc(recipe) {\n    if (recipe.name.toLowerCase().indexOf(filterText.toLowerCase()) !== -1) {\n      return true;\n    } else {\n      let containsFilterText = false;\n      recipe.ingredients.forEach(ingredient => {\n        if (ingredient.name.toLowerCase().indexOf(filterText.toLowerCase()) !== -1) {\n          containsFilterText = true;\n          return;\n        }\n      });\n      recipe.sources.forEach(source => {\n        if (source.toLowerCase().indexOf(filterText.toLowerCase()) !== -1) {\n          containsFilterText = true;\n          return;\n        }\n      });\n      return containsFilterText;\n    }\n  }\n  function handleFilterTextChange(filterText) {\n    setFilterText(filterText);\n  }\n  function handleExpandCollapseToggle() {\n    setExpanded(!isExpanded);\n    let expandedRecipes;\n    if (isExpanded) {\n      expandedRecipes = recipes.map(recipe => {\n        return {...recipe, isDisplayingInfo: false}\n      });\n    } else {\n      expandedRecipes = recipes.map(recipe => {\n        return {...recipe, isDisplayingInfo: true}\n      });\n    }\n    setRecipes(expandedRecipes);\n  }\n  function handleFilterBtnChange(filterBtn) {\n    setFilterBtn(filterBtn);\n  }\n  function toggleRecipeCompleted(id) {\n    const editedRecipes = recipes.map(recipe => {\n      if (recipe.id === id) {\n        return {...recipe, isCompleted: !recipe.isCompleted}\n      }\n      return recipe;\n    });\n    setRecipes(editedRecipes);\n  }\n  function toggleDisplayRecipeInfo(id) {\n    const editedRecipes = recipes.map(recipe => {\n      if (recipe.id === id) {\n        return {...recipe, isDisplayingInfo: !recipe.isDisplayingInfo}\n      }\n      return recipe;\n    });\n    setRecipes(editedRecipes);\n  }\n  function handleShowModalToggle() {\n    setShowingModal(!isShowingModal);\n  }\n  function uncheckAllRecipes() {\n    const editedRecipes = recipes.map(recipe => {\n        return {...recipe, isCompleted: false}\n    });\n    setRecipes(editedRecipes);\n  }\n\n  return (\n    <div>\n      <div className=\"settings-btn-container\">\n        <SettingsBtn onShowModalToggle={handleShowModalToggle} />\n      </div>\n      <Modal\n        isShowing={isShowingModal}\n        onShowModalToggle={handleShowModalToggle} \n        uncheckAllRecipes={uncheckAllRecipes} />\n      <h1>Stardew Valley Cooking Checklist</h1>\n      <SearchBar\n        filterText={filterText}\n        onFilterTextChange={handleFilterTextChange} />\n      <div className=\"filter-btn-container\">\n        {filterBtns}\n      </div>\n      <ExpandCollapseBtn\n        name={isExpanded ? \"Collapse All\" : \"Expand All\"}\n        onExpandCollapseToggle={handleExpandCollapseToggle} />\n      <ul className=\"recipe-list\">\n        {recipeList}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}